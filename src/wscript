#!/usr/bin/env python

from os.path import join,expanduser

VERSION='0.1.0'

top = '.'
out = 'build'

def options(opt):
    opt.load('compiler_c')
    opt.load('compiler_cxx')

    opt.add_option('--local-dir', action='store', default='',
        help='Search C/C++ headers in local-dir/include, and libraries in local-dir/lib')

    opt.add_option('--hdf5-inc-dir', action='store', default='',
        help='HDF5 include directory.')

    opt.add_option('--hdf5-lib-dir', action='store', default='',
        help='HDF5 libraries directory.')

    opt.add_option('--mtb-inc-dir', action='store', default='',
        help='minimal-traceback include directory.')

    opt.add_option('--mtb-lib-dir', action='store', default='',
        help='minimal-traceback libraries directory.')

    opt.add_option('--python-bindings', action='store_true', default=False,
            help='Generate Python bindings using SWIG (default: False)')

def configure(conf):
    conf.load('compiler_c')
    conf.load('compiler_cxx')

    if conf.options.local_dir:
        local_dir = expanduser(conf.options.local_dir)
        conf.env.prepend_value('INCLUDES', join(local_dir,'include'))
        conf.env.prepend_value('LIBPATH', join(local_dir, 'lib'))
        conf.env.prepend_value('RPATH', join(local_dir, 'lib'))

    if conf.options.hdf5_inc_dir:
        hdf5_inc_dir = expanduser(conf.options.hdf5_inc_dir)
        conf.env.prepend_value('INCLUDES', hdf5_inc_dir)

    if conf.options.hdf5_lib_dir:
        hdf5_lib_dir = expanduser(conf.options.hdf5_lib_dir)
        conf.env.prepend_value('LIBPATH',hdf5_lib_dir)
        conf.env.prepend_value('RPATH',hdf5_lib_dir)

    if conf.options.mtb_inc_dir:
        mtb_inc_dir = expanduser(conf.options.mtb_inc_dir)
        conf.env.prepend_value('INCLUDES', mtb_inc_dir)

    if conf.options.mtb_lib_dir:
        mtb_lib_dir = expanduser(conf.options.mtb_lib_dir)
        conf.env.prepend_value('LIBPATH',mtb_lib_dir)
        conf.env.prepend_value('RPATH',mtb_lib_dir)

    conf.check(header_name='hdf5.h', features='c cprogram')
    #conf.check(header_name='hdf5_hl.h', features='c cprogram')
    conf.check_cc(lib='hdf5')
    conf.check_cc(lib='minimal_traceback')

    if conf.options.python_bindings:
        conf.env.PYTHON_BINDINGS = True
        conf.load('python')
        conf.check_python_version((2,4,2))
        conf.check_python_headers()

        conf.load('swig')
        if conf.check_swig_version() < (1,2,27):
            conf.fatal('this swig version is too old')

        import numpy
        numpy_inc = numpy.get_include()

        #python_inc = join(miniconda_dir,'include','python2.7')
        #conf.env.prepend_value('INCLUDES', [python_inc,numpy_inc])
        conf.env.prepend_value('INCLUDES', [numpy_inc])
    else:
        conf.env.PYTHON_BINDINGS = False

def build(bld):
    bld.shlib(
        source = ['h5unixpipe.c'],
        target = 'h5unixpipe',
        lib = 'minimal_traceback hdf5_hl hdf5',
    )

    bld.shlib(
        source = 'h5unixpipe_cxx.cxx',
        target = 'h5unixpipe_cxx',
        lib = 'hdf5_cpp hdf5_hl hdf5'
        #cxxflags = ['-g','-O0'],
        ##cxxflags = ['-O3','-DNDEBUG'],
    )

    bld.install_files('${PREFIX}/include', 
       ['h5unixpipe.h',])

    if bld.env.PYTHON_BINDINGS:
        bld(
            features = 'cxx cxxshlib pyext',
            source = 'h5unixpipe.i',
            target = '_h5unixpipe',
            swig_flags = '-c++ -python',
            includes = '.',
            vnum = VERSION,
            use  = 'h5unixpipe',
            #cxxflags = ['-O3','-DNDEBUG'],
            cxxflags = ['-g','-O0'],
        )
        python_site_package = '${PREFIX}/lib/python%s/site-packages' % bld.env['PYTHON_VERSION']
        bld.install_files(python_site_package, 'h5unixpipe.py')

