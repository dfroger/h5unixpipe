#!/usr/bin/env python
from os.path import expanduser, join

EXTERNAL = ['hdf5', 'h5unixpipe', 'mtb']

def options(opt):
    opt.load('compiler_c')
    opt.load('python')

    opt.add_option('--local-dir', action='store', default='',
        help='Search C/C++ headers in local-dir/include, ' \
             'and libraries in local-dir/lib')

    for name in EXTERNAL:
        opt.add_option('--%s-dir' % name,
            action='store', default='',
            help='%s directory.' % name)

        opt.add_option('--%s-inc-dir' % name,
            action='store', default='',
            help='%s headers directory.' % name)

        opt.add_option('--%s-lib-dir' % name,
            action='store', default='',
            help='%s library directory.' % name)

def configure(conf):
    conf.load('compiler_c')

    if conf.options.local_dir:
        local_dir = expanduser(conf.options.local_dir)
        conf.env.prepend_value('INCLUDES', join(local_dir,'include'))
        conf.env.prepend_value('LIBPATH', join(local_dir, 'lib'))
        conf.env.prepend_value('RPATH', join(local_dir, 'lib'))

    for name in EXTERNAL:
        inc_dir = getattr(conf.options, '%s_inc_dir' % name)
        if inc_dir:
            conf.env['INCLUDES_%s' % name.upper()] = expanduser(inc_dir)

        lib_dir = getattr(conf.options, '%s_inc_dir' % name)
        if lib_dir:
            conf.env['LIBPATH_%s' % name.upper()] = expanduser(lib_dir)
            conf.env['RPATH_%s' % name.upper()] = expanduser(lib_dir)

        root_dir = getattr(conf.options, '%s_dir' % name)
        if root_dir:
            root_dir = expanduser(root_dir)
            conf.env['INCLUDES_%s' % name.upper()] = join(root_dir, 'include')
            conf.env['LIBPATH_%s' % name.upper()] = join(root_dir, 'lib')
            conf.env['RPATH_%s' % name.upper()] = join(root_dir, 'lib')

    conf.check(header_name='hdf5.h', features='c cprogram', use='HDF5')
    conf.check(header_name='h5unixpipe.h', features='c cprogram', 
               use='H5UNIXPIPE HDF5')
    conf.check_cc(lib='h5unixpipe hdf5_hl hdf5', use='H5UNIXPIPE HDF5')

def build(bld):

    bld.program(
        source = 'stdin_stdout.c',
        target = 'stdin_stdout',
        lib  = ['h5unixpipe','hdf5_hl','hdf5','minimal_traceback'],
        cxxflags = ['-g','-O0'],
        use = 'H5UNIXPIPE HDF5',
    )

    bld.program(
        source = 'simplewrite.c',
        target = 'simplewrite',
        lib  = ['h5unixpipe','hdf5_hl','hdf5','minimal_traceback'],
        cxxflags = ['-g','-O0'],
        use = 'H5UNIXPIPE HDF5',
    )

